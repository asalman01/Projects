# By default, Python does not provide abstract classes. Python comes with a module which# provides the base for defining Abstract Base classes(ABC) and that module name is ABC. # ABC works by decorating methods of the base class as abstract and then registering # concrete classes as implementations of the abstract base. A method becomes abstract when# decorated with the keyword @abstractmethod. from abc import ABC, abstractmethod# An abstract class that represents an expression node for a binary expression tree# Every subclass of ExpressionTreeNode must define the methods prefix(), infix(), # postfix(), value()class ExpressionTreeNode(ABC):    def __init__(self, parent, leftChild=None, rightChild=None):        # Instantiates an Expression TreeNode with default left and right children         # set to None        self.parent = parent        self.leftChild = leftChild        self.rightChild = rightChild    # Prints the information of the binary expression tree node.    def info(self):        info = ''        info += 'infix:   ' + str(self.infix())    + '\n'        info += 'prefix:  ' + str(self.prefix())   + '\n'        info += 'postfix: ' + str(self.postfix())  + '\n'        info += 'value =  ' + str(self.value()) + '\n'        print(info)            # Prints a visualization of the binary expression tree node.    def display(self):        parentCharLength = len(str(self.getParent()))        numWhitespaces = 7 - parentCharLength        print(' ' * numWhitespaces, str(self.getParent()) , sep = '')        print(' |        |')        print(str(self.getLeftChild()), '     ', str(self.getRightChild()) , sep = '')            def getLeftChild(self):        return self.leftChild            def getParent(self):        return self.parent            def getRightChild(self):        return self.rightChild        # Returns the value associated with the binary expression tree node    @abstractmethod     def value(self):          pass    # Returns the infix notation of the binary expression tree node    @abstractmethod    def infix(self):        pass            # Returns the prefix notation of the binary expression tree node    @abstractmethod    def prefix(self):        pass        # Returns the postfix notation of binary expression tree node    @abstractmethod    def postfix(self):         pass# A subclass that represents an atomic node whose parent holds a numerical value  class ConstantNode(ExpressionTreeNode):    # returns infix notation of node    def infix(self):        return str(self)    # returns prefix notation of node    def prefix(self):        return str(self)    # returns postfix notation of node	    def postfix(self):        return str(self)		    # returns the numerical data value in the parent node    def value(self):        return self.parent        # Returns the string representation of the constant node.    def __str__(self):        return str(self.parent)# A subclass that represents a binary expression. The parent node must contain one of the  # following binary operators: +, -, *, / and the child nodes point to the operands. class OperatorNode(ExpressionTreeNode):    # returns the value associated with the binary expression in the operator node    def value(self):        left_value = self.leftChild.value()        right_value = self.rightChild.value()        if self.parent == '+':            return left_value + right_value        elif self.parent == '-':            return left_value - right_value        elif self.parent == '*':            return left_value * right_value        elif self.parent == '/':            if right_value == 0:                raise ValueError("Division by zero")            return left_value / right_value    # returns infix notation of node	    def infix(self):        return f"({self.leftChild.infix()} {self.parent} {self.rightChild.infix()})"    # returns prefix notation of node		 	 	 		 	 	 	    def prefix(self):        return f"{self.parent} {self.leftChild.prefix()} {self.rightChild.prefix()}"    # returns postfix notation of node	    def postfix(self):        return f"{self.leftChild.postfix()} {self.rightChild.postfix()} {self.parent}"